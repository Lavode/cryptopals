package padding

import (
	"testing"

	"github.com/Lavode/cryptopals/expect"
)

func TestPKCS7PadAndUnpad(t *testing.T) {
	msg := []byte{0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09}
	padded := []byte{
		0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09,
		0x06, 0x06, 0x06, 0x06, 0x06, 0x06,
	}
	expect.Equals(t, padded, PKCS7Pad(msg, 16))

	unpadded, err := PKCS7Unpad(padded)
	expect.NoError(t, err)
	expect.Equals(t, msg, unpadded)

	// Block-aligned message padded with full block.
	msg = []byte{
		0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
		0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F,
	}
	padded = []byte{
		0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
		0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F,
		0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10,
		0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10,
	}
	expect.Equals(t, padded, PKCS7Pad(msg, 16))

	unpadded, err = PKCS7Unpad(padded)
	expect.NoError(t, err)
	expect.Equals(t, msg, unpadded)

	// Empty message padded to full block.
	msg = []byte{}
	padded = []byte{
		0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10,
		0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10,
	}
	expect.Equals(t, padded, PKCS7Pad(msg, 16))

	unpadded, err = PKCS7Unpad(padded)
	expect.NoError(t, err)
	expect.Equals(t, msg, unpadded)

	msg = []byte("YELLOW SUBMARINE")
	padded = []byte{
		0x59, 0x45, 0x4c, 0x4c, 0x4f, 0x57, 0x20, 0x53, 0x55, 0x42, 0x4d, 0x41, 0x52, 0x49, 0x4e, 0x45,
		0x04, 0x04, 0x04, 0x04,
	}
	expect.Equals(t, padded, PKCS7Pad(msg, 20))

	unpadded, err = PKCS7Unpad(padded)
	expect.NoError(t, err)
	expect.Equals(t, msg, unpadded)
}

func TestPKCS7UnpadInvalidPadding(t *testing.T) {
	padded := []byte{
		0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09,
		0x05, 0x06, 0x06, 0x06, 0x06, 0x06,
	}
	_, err := PKCS7Unpad(padded)
	expect.Error(t, err)

	padded = []byte{
		0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09,
		0x06, 0x06, 0x06, 0x06, 0x06, 0x05,
	}
	_, err = PKCS7Unpad(padded)
	expect.Error(t, err)
}
